/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AppModelValidateResponse;
import org.openapitools.model.AppRequest;
import org.openapitools.model.AppRequestObjectType;
import org.openapitools.model.AppRequestStatus;
import org.openapitools.model.AppRequestType;
import org.openapitools.model.Apps;
import org.openapitools.model.Contract;
import org.openapitools.model.CreateAppContractResponse;
import org.openapitools.model.CreateModels;
import org.openapitools.model.ErrorResponse;
import org.openapitools.model.Group;
import org.openapitools.model.GroupResponse;
import org.openapitools.model.Groups;
import org.openapitools.model.InlineObject;
import org.openapitools.model.InlineObject1;
import org.openapitools.model.InlineObject2;
import org.openapitools.model.InlineObject3;
import org.openapitools.model.InlineObject4;
import org.openapitools.model.InlineObject5;
import org.openapitools.model.InlineResponse200;
import org.openapitools.model.InlineResponse2001;
import org.openapitools.model.InlineResponse2002;
import org.openapitools.model.InlineResponse2003;
import org.openapitools.model.InlineResponse2004;
import org.openapitools.model.Model;
import org.openapitools.model.OkResponse;
import org.openapitools.model.OperateModelResponse;
import org.openapitools.model.TaskLog;
import org.openapitools.model.UpdateModels;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-22T02:49:04.527Z[UTC]")

@Validated
@Api(value = "{project_id}", description = "the {project_id} API")
public interface ProjectIdApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "validate app model name and version", nickname = "allocateGroupModel", notes = "Validate if app model is acceptable with specified name or (name & version)", response = AppModelValidateResponse.class, tags={ "App Group Model", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AppModelValidateResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/model-validate",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AppModelValidateResponse> allocateGroupModel(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@NotNull @ApiParam(value = "name of model", required = true) @Valid @RequestParam(value = "name", required = true) String name,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "version of model") @Valid @RequestParam(value = "version", required = false) String version) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"result\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "create an application group", nickname = "createGroup", notes = "This is to create a application group", response = GroupResponse.class, tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized error", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal error", response = ErrorResponse.class) })
    @RequestMapping(value = "/{project_id}/apps/groups",
        produces = { "text/plain", "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GroupResponse> createGroup(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject inlineObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"group_id\" : \"e087a0b9-7ebe-455b-8ecc-99bf8d88c054\",  \"job_id\" : \"JOB228053f1-b616-45f8-ba17-50ad8078a4aa\",  \"message\" : \"group in creating\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "create a application model", nickname = "createGroupModels", notes = "Create a application model in a app group", response = InlineResponse2001.class, tags={ "App Group Model", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2001.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2001> createGroupModels(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "Provisioning parmeters that need to be added to the model" ,required=true )  @Valid @RequestBody CreateModels createModels) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"model_id\" : \"model_id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "create a contract", nickname = "createModelContract", notes = "Create contract for a group model", response = CreateAppContractResponse.class, tags={ "Application Model Contracts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CreateAppContractResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}/contracts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CreateAppContractResponse> createModelContract(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject5 inlineObject5) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"contract_ids\" : [ \"4a671e8b-70fb-4530-bb11-8b45cb91ff8d\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "delete application group", nickname = "deleteGroup", notes = "Delete application group by group ID for a given project ID", response = GroupResponse.class, tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupResponse.class),
        @ApiResponse(code = 401, message = "Invalid username/password supplied", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal error", response = ErrorResponse.class) })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<GroupResponse> deleteGroup(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of the application group",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"group_id\" : \"e087a0b9-7ebe-455b-8ecc-99bf8d88c054\",  \"job_id\" : \"JOB228053f1-b616-45f8-ba17-50ad8078a4aa\",  \"message\" : \"group in creating\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "delete a contrat", nickname = "deleteModelContract", notes = "Delete a specified Contract", response = OkResponse.class, tags={ "Application Model Contracts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OkResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}/contracts/{contract_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<OkResponse> deleteModelContract(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "ID of an contract",required=true) @PathVariable("contract_id") String contractId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Message\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "delete model relation", nickname = "deleteRelationGroupModel", notes = "Delete Relation for producer model and consumer model", response = OkResponse.class, tags={ "Application Model Relations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OkResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/model-relations",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<OkResponse> deleteRelationGroupModel(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@NotNull @ApiParam(value = "ID of producer model", required = true) @Valid @RequestParam(value = "producer_model_id", required = true) String producerModelId,@NotNull @ApiParam(value = "ID of consumer model", required = true) @Valid @RequestParam(value = "consumer_model_id", required = true) String consumerModelId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Message\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get the application group info", nickname = "getAppGroup", notes = "This is to get a application group information", response = Group.class, tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Group.class),
        @ApiResponse(code = 400, message = "bad request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized error", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal error", response = ErrorResponse.class) })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}",
        produces = { "text/plain", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Group> getAppGroup(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of the application group",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"servicecomb-group\",  \"description\" : \"my group description\",  \"type\" : \"servicecomb\",  \"label\" : \"dev\",  \"platforms\" : {    \"vpc\" : {      \"id\" : \"8ab8374e-e8d5-4313-82a9-2fa17632ea62\",      \"parameters\" : {        \"subnet\" : {          \"id\" : \"7d6feb11-6408-49be-95eb-c54d2e3ce235\"        }      }    },    \"cse\" : {      \"id\" : \"default\"    },    \"apm\" : {      \"id\" : \"servicecomb-group\"    }  },  \"configuration\" : {    \"enterprise_project_id\" : 0,    \"env\" : [ {      \"name\" : \"env1\",      \"value\" : \"val1\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get apply requet infomation", nickname = "getAppRequest", notes = "Get App Request", response = AppRequest.class, tags={ "App Requests", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AppRequest.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/requests/{request_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AppRequest> getAppRequest(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "id of request",required=true) @PathVariable("request_id") String requestId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"approver\" : \"usera\",  \"requester\" : \"root\",  \"created_at\" : \"2019-06-26T02:44:59Z\",  \"updated_at\" : \"2019-06-26T02:44:59Z\",  \"request_type\" : \"PUBLISH_APPROVAL\",  \"request_object_id\" : \"14c6c21f-b490-48c3-9542-5d5cee111134\",  \"project_id\" : \"a85103e0a3c44a72b5abfdde50b424cb\",  \"description\" : \"model-example model-version DRAFT\",  \"request_object_type\" : \"APP_MODEL\",  \"request_object_info\" : {    \"model_name\" : \"model3\",    \"model_version\" : 1.0,    \"model_group_id\" : \"790f511b-93b5-4a4f-afc9-650b3c9d54eb\",    \"model_group_name\" : \"group_name\",    \"enterprise_project_id\" : \"epid\"  },  \"request_id\" : \"7fbecd2d-bcc9-4dcd-a860-f3a1bac45c14\",  \"status\" : \"PENDING\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get applying requests", nickname = "getAppRequests", notes = "Get App Requests", response = InlineResponse2004.class, tags={ "App Requests", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2004.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/requests",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2004> getAppRequests(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "request type", allowableValues = "PUBLISH_APPROVAL, DEPRECATE_APPROVAL, DELETE_APPROVAL") @Valid AppRequestType requestType,@ApiParam(value = "request object type", allowableValues = "APP_MODEL") @Valid AppRequestObjectType requestObjectType,@ApiParam(value = "request status", allowableValues = "PENDING, APPROVED, REJECTED") @Valid AppRequestStatus status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"app_requests\" : [ {    \"approver\" : \"usera\",    \"requester\" : \"root\",    \"created_at\" : \"2019-06-26T02:44:59Z\",    \"updated_at\" : \"2019-06-26T02:44:59Z\",    \"request_type\" : \"PUBLISH_APPROVAL\",    \"request_object_id\" : \"14c6c21f-b490-48c3-9542-5d5cee111134\",    \"project_id\" : \"a85103e0a3c44a72b5abfdde50b424cb\",    \"description\" : \"model-example model-version DRAFT\",    \"request_object_type\" : \"APP_MODEL\",    \"request_object_info\" : {      \"model_name\" : \"model3\",      \"model_version\" : 1.0,      \"model_group_id\" : \"790f511b-93b5-4a4f-afc9-650b3c9d54eb\",      \"model_group_name\" : \"group_name\",      \"enterprise_project_id\" : \"epid\"    },    \"request_id\" : \"7fbecd2d-bcc9-4dcd-a860-f3a1bac45c14\",    \"status\" : \"PENDING\"  }, {    \"approver\" : \"usera\",    \"requester\" : \"root\",    \"created_at\" : \"2019-06-26T02:44:59Z\",    \"updated_at\" : \"2019-06-26T02:44:59Z\",    \"request_type\" : \"PUBLISH_APPROVAL\",    \"request_object_id\" : \"14c6c21f-b490-48c3-9542-5d5cee111134\",    \"project_id\" : \"a85103e0a3c44a72b5abfdde50b424cb\",    \"description\" : \"model-example model-version DRAFT\",    \"request_object_type\" : \"APP_MODEL\",    \"request_object_info\" : {      \"model_name\" : \"model3\",      \"model_version\" : 1.0,      \"model_group_id\" : \"790f511b-93b5-4a4f-afc9-650b3c9d54eb\",      \"model_group_name\" : \"group_name\",      \"enterprise_project_id\" : \"epid\"    },    \"request_id\" : \"7fbecd2d-bcc9-4dcd-a860-f3a1bac45c14\",    \"status\" : \"PENDING\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get application under application group", nickname = "getGroupApplications", notes = "Get all application instances for a given group ID", response = Apps.class, responseContainer = "List", tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Apps.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/members",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Apps>> getGroupApplications(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"reason\" : \"reason\",  \"app_type\" : \"app_type\",  \"replica\" : 0,  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"display_name\" : \"display_name\",  \"version\" : \"version\",  \"url\" : \"url\",  \"instance_id\" : \"instance_id\",  \"platform_type\" : \"platform_type\",  \"project_id\" : \"project_id\",  \"last_update_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"name\" : \"name\",  \"assembling_job_id\" : \"assembling_job_id\",  \"status\" : \"INITIALIZING\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get application model infomation", nickname = "getGroupModel", notes = "Get a application model for app group with a given model ID", response = Model.class, tags={ "App Group Model", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Model.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Model> getGroupModel(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"group_id\" : \"4bd44bc7-fe08-4d46-8406-b982f7a982d9\",  \"model_id\" : \"14c6c21f-b490-48c3-9542-5d5cee111134\",  \"name\" : \"model-example\",  \"created_at\" : \"2019-06-25T12:40:46Z\",  \"version\" : \"model-version\",  \"description\" : \"model-description\",  \"source\" : { },  \"status\" : \"DRAFT\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get all application models", nickname = "getGroupModels", notes = "Get all application models for app group with a given project ID", response = InlineResponse200.class, tags={ "App Group Model", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> getGroupModels(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "query parameters for listing models") @Valid @RequestParam(value = "name", required = false) String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"app_models\" : [ {    \"group_id\" : \"4bd44bc7-fe08-4d46-8406-b982f7a982d9\",    \"model_id\" : \"14c6c21f-b490-48c3-9542-5d5cee111134\",    \"name\" : \"model-example\",    \"created_at\" : \"2019-06-25T12:40:46Z\",    \"version\" : \"model-version\",    \"description\" : \"model-description\",    \"source\" : { },    \"status\" : \"DRAFT\"  }, {    \"group_id\" : \"4bd44bc7-fe08-4d46-8406-b982f7a982d9\",    \"model_id\" : \"14c6c21f-b490-48c3-9542-5d5cee111134\",    \"name\" : \"model-example\",    \"created_at\" : \"2019-06-25T12:40:46Z\",    \"version\" : \"model-version\",    \"description\" : \"model-description\",    \"source\" : { },    \"status\" : \"DRAFT\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get application group job and task details", nickname = "getGroupTaskLogs", notes = "Task logs can optionally be filtered by job-id and/or job-type. Also, it's backed by offset pagination in case there are many records.", response = TaskLog.class, responseContainer = "List", tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TaskLog.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/logs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TaskLog>> getGroupTaskLogs(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "JobID is stored in both taskmgr_job and taskmgr_task tables: e.g., JOB602d157d-e98d-49bd-bdcb-15f49f9df323") @Valid @RequestParam(value = "job_id", required = false) String jobId,@ApiParam(value = "TaskID is the primary key of the taskmgr_task table, as, e.g., Task-5701507c-c9b8-44a5-9f3f-8751f92f5b7c") @Valid @RequestParam(value = "task_id", required = false) String taskId,@ApiParam(value = "Job types: PROVISION, UNPROVISION, DAILY_OPERATION, UNKNOWN", allowableValues = "PROVISION, UNPROVISION, DAILY_OPERATION, UNKNOWN") @Valid @RequestParam(value = "job_type", required = false) List<String> jobType,@ApiParam(value = "An integer to limit the number of records returned", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Retrieves records starting from offset", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "order by data fields", defaultValue = "lastCheck") @Valid @RequestParam(value = "orderby", required = false, defaultValue="lastCheck") String orderby,@ApiParam(value = "order by decending or acending order", defaultValue = "true") @Valid @RequestParam(value = "desc", required = false, defaultValue="true") String desc) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"job_type\" : \"job_type\",  \"task_name\" : \"task_name\",  \"task_status\" : \"task_status\",  \"owner_id\" : \"owner_id\",  \"job_desc\" : \"job_desc\",  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",  \"last_health_check\" : \"2000-01-23T04:56:07.000+00:00\",  \"task_id\" : \"task_id\",  \"service_instance_id\" : \"service_instance_id\",  \"created_by\" : \"created_by\",  \"job_name\" : \"job_name\",  \"project_id\" : \"project_id\",  \"job_id\" : \"job_id\",  \"task_index\" : \"task_index\",  \"execution_status\" : \"execution_status\",  \"task_type\" : \"task_type\",  \"order_id\" : \"order_id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get all application groups", nickname = "getGroups", notes = "Get all application groups for a given project ID", response = Groups.class, responseContainer = "List", tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Groups.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal error", response = ErrorResponse.class) })
    @RequestMapping(value = "/{project_id}/apps/groups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Groups>> getGroups(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"servicecomb-group\",  \"description\" : \"my group description\",  \"type\" : \"servicecomb\",  \"label\" : \"dev\",  \"group_id\" : \"e087a0b9-7ebe-455b-8ecc-99bf8d88c054\",  \"project_id\" : \"8654c759609f48d5aa89063e51c00df7\",  \"created_at\" : \"2019-03-22T02:42:29Z\",  \"last_update_at\" : \"2019-03-22T02:42:29Z\",  \"status\" : \"READY\",  \"platforms\" : {    \"vpc\" : {      \"id\" : \"8ab8374e-e8d5-4313-82a9-2fa17632ea62\",      \"parameters\" : {        \"subnet\" : {          \"id\" : \"7d6feb11-6408-49be-95eb-c54d2e3ce235\"        }      }    },    \"cse\" : {      \"id\" : \"default\"    },    \"apm\" : {      \"id\" : \"servicecomb-group\"    }  },  \"configuration\" : {    \"cse\" : {      \"name\" : \"Cloud Service Engine\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get contract information", nickname = "getModelContract", notes = "get specified Contract", response = Contract.class, tags={ "Application Model Contracts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Contract.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}/contracts/{contract_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Contract> getModelContract(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "ID of an contract",required=true) @PathVariable("contract_id") String contractId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"contract_name\",  \"path\" : \"contract_path\",  \"contract_id\" : \"4a671e8b-70fb-4530-bb11-8b45cb91ff8d\",  \"model_id\" : \"58f75f14-a20b-4a6f-bbfa-72c0efd49759\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get contracts in a group model", nickname = "getModelContracts", notes = "Get Contracts in a group model", response = InlineResponse2003.class, tags={ "Application Model Contracts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2003.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}/contracts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2003> getModelContracts(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"app_contracts\" : [ {    \"name\" : \"contract_name\",    \"path\" : \"contract_path\",    \"contract_id\" : \"4a671e8b-70fb-4530-bb11-8b45cb91ff8d\",    \"model_id\" : \"58f75f14-a20b-4a6f-bbfa-72c0efd49759\"  }, {    \"name\" : \"contract_name\",    \"path\" : \"contract_path\",    \"contract_id\" : \"4a671e8b-70fb-4530-bb11-8b45cb91ff8d\",    \"model_id\" : \"58f75f14-a20b-4a6f-bbfa-72c0efd49759\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get model relations", nickname = "listGroupModelRelations", notes = "List application group model relations", response = InlineResponse2002.class, tags={ "Application Model Relations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2002.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/model-relations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2002> listGroupModelRelations(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"app_model_relations\" : [ {    \"producer_model_id\" : \"58f75f14-a20b-4a6f-bbfa-72c0efd49759\",    \"consumer_model_id\" : \"102fb122-58d7-4592-be5a-c6c317eb2074\"  }, {    \"producer_model_id\" : \"58f75f14-a20b-4a6f-bbfa-72c0efd49759\",    \"consumer_model_id\" : \"102fb122-58d7-4592-be5a-c6c317eb2074\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "accecpt or reject a request", nickname = "operateAppRequest", notes = "Operate App Request", response = OkResponse.class, tags={ "App Requests", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OkResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/requests/{request_id}/operation",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<OkResponse> operateAppRequest(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "id of request",required=true) @PathVariable("request_id") String requestId,@NotNull @ApiParam(value = "request operation", required = true, allowableValues = "APPROVE, REJECT") @Valid @RequestParam(value = "action", required = true) String action,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Message\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "operate a application model", nickname = "operateGroupModel", notes = "Operate a application model a given model ID", response = OperateModelResponse.class, tags={ "App Group Model", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OperateModelResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}/operation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<OperateModelResponse> operateGroupModel(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@NotNull @ApiParam(value = "request operation", required = true, allowableValues = "PUBLISH, DEPRECATE, DEPLOY, DELETE") @Valid @RequestParam(value = "action", required = true) String action,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = ""  )  @Valid @RequestBody InlineObject2 inlineObject2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"request_id\" : \"testrequestid\",  \"model_id\" : \"testmodelid\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "add model relation", nickname = "relateGroupModel", notes = "Relate producer model and consumer model", response = OkResponse.class, tags={ "Application Model Relations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OkResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/model-relations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<OkResponse> relateGroupModel(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject3 inlineObject3) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Message\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "update the application group", nickname = "updateGroup", notes = "This is to update a application group", response = GroupResponse.class, tags={ "Application Group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized error", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal error", response = ErrorResponse.class) })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}",
        produces = { "text/plain", "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<GroupResponse> updateGroup(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of the application group",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject1 inlineObject1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"group_id\" : \"e087a0b9-7ebe-455b-8ecc-99bf8d88c054\",  \"job_id\" : \"JOB228053f1-b616-45f8-ba17-50ad8078a4aa\",  \"message\" : \"group in creating\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "update application model", nickname = "updateGroupModel", notes = "Update a application model with a given model id", response = OkResponse.class, tags={ "App Group Model", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OkResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<OkResponse> updateGroupModel(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "Parmeters that need to be updated to the model" ,required=true )  @Valid @RequestBody UpdateModels updateModels) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Message\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "update contract", nickname = "updateModelContract", notes = "Update a specified Contract", response = OkResponse.class, tags={ "Application Model Contracts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OkResponse.class),
        @ApiResponse(code = 400, message = "Invalid Parameters"),
        @ApiResponse(code = 401, message = "Invalid username/password supplied"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/{project_id}/apps/groups/{group_id}/models/{model_id}/contracts/{contract_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<OkResponse> updateModelContract(@ApiParam(value = "ID of the tenant's project on the cloud",required=true) @PathVariable("project_id") String projectId,@ApiParam(value = "ID of an application group ID. e.g. app3gdocdeg18gkg013d",required=true) @PathVariable("group_id") String groupId,@ApiParam(value = "ID of an app group model",required=true) @PathVariable("model_id") String modelId,@ApiParam(value = "ID of an contract",required=true) @PathVariable("contract_id") String contractId,@ApiParam(value = "Authentication Token" ,required=true) @RequestHeader(value="X-Auth-Token", required=true) String xAuthToken,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject4 inlineObject4) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"Message\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
